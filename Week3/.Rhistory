stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') #+
#scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_group_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_group('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_fill_manual('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_fill('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', col = NA, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorba', width = 0.2, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.2, alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.02) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point')
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.02) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.02) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.02, position = position_jitter(width = 0.02)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.02, position = 'dodge') +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.02, position = position_dodge(width = 0.02)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.02, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.1, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.3, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.y = mean, geom = 'point') +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.2, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line', position = position_dodge(width = 0.2)) +
stat_summary(fun.y = mean, geom = 'point',position = position_dodge(width = 0.2)) +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.2, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line', position = position_dodge(width = 0.2)) +
stat_summary(fun.y = mean, geom = 'point',position = position_dodge(width = 0.2)) +
# fun.args = list(mult = 1) to have a ribbon that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.1, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line', position = position_dodge(width = 0.2)) +
stat_summary(fun.y = mean, geom = 'point',position = position_dodge(width = 0.2)) +
# fun.args = list(mult = 1) to have a errorbar that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.1, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site') +
ggtitle('With Errorbar')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon') +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site') +
ggtitle('With Errorbar')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line', position = position_dodge(width = 0.2)) +
stat_summary(fun.y = mean, geom = 'point',position = position_dodge(width = 0.2)) +
# fun.args = list(mult = 1) to have a errorbar that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.1, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site') +
ggtitle('With Errorbar')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', alpha = 0.1) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site') +
ggtitle('With Errorbar')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line', position = position_dodge(width = 0.2)) +
stat_summary(fun.y = mean, geom = 'point',position = position_dodge(width = 0.2)) +
# fun.args = list(mult = 1) to have a errorbar that spans over one standard deviation in both directions.
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'errorbar', width = 0.1, position = position_dodge(width = 0.2)) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site') +
ggtitle('With Errorbar')
ggplot(barley, aes(x = year, y = yield, col = site, fill = site, group = site)) +
stat_summary(fun.y = mean, geom = 'line') +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), geom = 'ribbon', alpha = 0.1, col = NA) +
scale_x_discrete('Year', expand = c(0.05, 0.05)) +
scale_y_continuous('Yield (bushels/acre)') +
scale_color_discrete('Site') +
scale_fill_discrete('Site') +
ggtitle('With Errorbar')
party
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
View(party)
class(party)
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
party <- as.table(party)
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
party <- as.data.frame.table(party)
class(party)
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
party <- as.data.frame.table(party)
chisq.test(party)$residuals
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
party <- as.data.table(party)
install.packages('data.table')
library(data.table)
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
party <- as.data.table(party)
chisq.test(party)$residuals
class(party)
library(data.table)
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
party <- as.data.table(party)
party <- as.table(party)
library(data.table)
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
party <- table(party)
chisq.test(party)$residuals
class(party)
View(party)
library(data.table)
party <- data.frame('gender' = c('F', 'M'), 'Democrat' = c(762, 484), 'Independent' = c(327, 239), 'Republician' = c(468, 477))
chisq.test(party)$residuals
df <- data.frame(
V1 = letters[1:4],
V2 = rep(LETTERS[1:3], each = 4),
V3 = 1:12
)
xtabs(V3 ~ V1 + V2, df)
df <- data.frame(
V1 = letters[1:4],
V2 = rep(LETTERS[1:3], each = 4),
V3 = 1:12
)
View(df)
party <- matrix(c('F', 762, 327, 468, 'M', 484, 239, 477), ncol = 4, byrow = T)
colnames(party) <- c('gender', 'Democrat', 'Independent', 'Republican')
party <- as.table(party)
chisq.test(party)$residuals
View(party)
party <- matrix(c('F', 762, 327, 468, 'M', 484, 239, 477), ncol = 4, byrow = T)
colnames(party) <- c('gender', 'Democrat', 'Independent', 'Republican')
View(party)
party <- matrix(c(762, 327, 468, 484, 239, 477), ncol = 3, byrow = T)
colnames(party) <- c('gender', 'Democrat', 'Independent', 'Republican')
rownames(party) <- c('F', 'M')
View(party)
party <- matrix(c(762, 327, 468, 484, 239, 477), ncol = 3, byrow = T)
colnames(party) <- c('Democrat', 'Independent', 'Republican')
rownames(party) <- c('F', 'M')
View(party)
party <- matrix(c(762, 327, 468, 484, 239, 477), ncol = 3, byrow = T)
colnames(party) <- c('Democrat', 'Independent', 'Republican')
rownames(party) <- c('F', 'M')
party <- as.table(party)
chisq.test(party)$residuals
chisq.test(party)$residuals
# Expected
chisq.test(party)$expected
install.packages('vcd')
library(vcd)
mosiac(party, shade = T, color = T)
library(vcd)
mosaic(party, shade = T, color = T)
setwd("D:/GitHub/NTU-CS-X/Week3")
library(ggplot2)
library(openintro)
library(dplyr)
# Use geom_plot() to make a scatterplot.
ggplot(ncbirths, aes(x = weeks, y = weight)) +
geom_point()
# Use cut() to break a continuous variable to a discrete one.
ggplot(data = ncbirths,
aes(x = cut(weeks, breaks = 5), y = weight)) +
geom_boxplot()
# Scatterplot with original scale.
ggplot(mammals, aes(x = BodyWt, y = BrainWt)) +
geom_point()
# Scatterplot with coord_trans().
ggplot(data = mammals, aes(x = BodyWt, y = BrainWt)) +
geom_point() +
coord_trans(x = "log10", y = "log10")
# Scatterplot with scale_x_log10() and scale_y_log10().
ggplot(data = mammals, aes(x = BodyWt, y = BrainWt)) +
geom_point() +
scale_x_log10() + scale_y_log10()
# Scatterplot with outliers.
ggplot(mlbBat10, aes(x = OBP, y = SLG)) +
geom_point()
# After removing those outliers.
mlbBat10 %>%
filter(AB >= 200) %>%
ggplot(aes(x = OBP, y = SLG)) +
geom_point()
ncbirths %>%
summarize(N = n(), r = cor(weight, weeks, use = "pairwise.complete.obs"))
# Correlation among mammals, with and without log
mammals %>%
summarize(N = n(),
r = cor(BodyWt, BrainWt),
r_log = cor(log(BodyWt), log(BrainWt)))
# Tidy up anscombe dataset
library(tidyr)
library(stringr)
Anscombe <-anscombe %>%
mutate(id = c(1:11)) %>%
gather(key_x, x, x1:x4) %>%
gather(key_y, y, y1:y4) %>%
arrange(id)
Anscombe$key_x <- str_replace(Anscombe$key_x,'x','')
Anscombe$key_y <- str_replace(Anscombe$key_y,'y','')
Anscombe <- filter(Anscombe, key_x == key_y) %>%
select('id', 'x', 'y')
Anscombe$set <- rep(c(1:4))
# Plot of Anscombe and wrapping according to set.
ggplot(data = Anscombe, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~ set)
Anscombe %>%
group_by(set) %>%
summarize(N = n(), mean(x), sd(x), mean(y), sd(y), cor(x, y))
# Scatterplot with regression line using geom_smooth()
ggplot(data = bdims, aes(x = hgt, y = wgt)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE)
# Calculate summary statistics
bdims_summary <- summarize(bdims, N = n(), r = cor(hgt, wgt),
mean_hgt = mean(hgt), sd_hgt = sd(hgt),
mean_wgt = mean(wgt), sd_wgt = sd(wgt))
bdims_summary <- mutate(bdims_summary, slope = r*sd_wgt/sd_hgt,
intercept = mean_wgt - r*sd_wgt/sd_hgt*mean_hgt)
bdims_summary
# Scatterplot with regression line using geom_abline()
ggplot(data = bdims, aes(x = hgt, y = wgt)) +
geom_point() +
geom_abline(slope = as.numeric(bdims_summary$slope), intercept = as.numeric(bdims_summary$intercept))
library(HistData)
# Height of children vs. parent
ggplot(data = Galton, aes(x = parent, y = child)) +
geom_jitter(alpha = 0.3) +
# Add a diagonal line which slopes = 1
geom_abline(slope = 1, intercept = 0) +
geom_smooth(method = 'lm', se = FALSE)
# Linear model for weight as a function of height
mod <- lm(wgt ~ hgt, data = bdims)
mod
# Show the coefficients
coef(mod)
# Show the full output
summary(mod)
# Mean of weights equal to mean of fitted values?
mean(bdims$wgt) == mean(fitted.values(mod))
# Mean of the residuals
mean(residuals(mod))
library(broom)
# Create bdims_tidy
bdims_tidy <- augment(mod)
# Glimpse the resulting data frame
glimpse(bdims_tidy)
ben <- data.frame('wgt' = 74.8, 'hgt' = 182.8)
predict(mod, newdata = ben)
ggplot(data = bdims, aes(x = hgt, y = wgt)) +
geom_point() +
geom_abline(intercept = coef(mod)[1], slope = coef(mod)[2],  color = "dodgerblue")
mod %>%
summarize(SSE = (n()-1) * var(.resid),
SSE_also = sum(.resid ^2))
View(bdims_summary)
bdims_tidy %>%
summarize(SSE = (n()-1) * var(.resid),
SSE_also = sum(.resid ^2))
summary(mod)
# Compute RMSE manually
sqrt(sum(residuals(mod)^2) / df.residual(mod))
View(mod)
# A Linear Model of bdims (same as before)
mod_smooth <- lm(hgt ~ wgt, data = bdims)
mod_smooth %>%
augment() %>%
summarise(SSE = sum(.resid ^ 2))
# A Null MOdel of bdims
mod_null <- lm(hgt ~ 1, data = bdims)
mod_smooth %>%
augment() %>%
summarise(SSE = sum(.resid ^ 2))
# A Linear Model of bdims (same as before)
mod_smooth <- lm(hgt ~ wgt, data = bdims)
mod_smooth %>%
augment() %>%
summarise(SSE = sum(.resid ^ 2))
# A Null MOdel of bdims
mod_null <- lm(hgt ~ 1, data = bdims)
mod_null %>%
augment() %>%
summarise(SSE = sum(.resid ^ 2))
# A Linear Model of bdims (same as before)
mod_smooth <- lm(wgt ~ hgt, data = bdims)
mod_smooth %>%
augment() %>%
summarise(SSE = sum(.resid ^ 2))
# A Null MOdel of bdims
mod_null <- lm(wgt ~ 1, data = bdims)
mod_null %>%
augment() %>%
summarise(SSE = sum(.resid ^ 2))
summary(mod)[5]
summary(mod)[4]
summary(mod)[6]
summary(mod)[7]
summary(mod)[8]
summary(mod)[[5]]
summary(mod)[[6]]
summary(mod)[[7]]
summary(mod)
class(summary(mod))
summary(mod)
summary(mod)
lm(SLG ~ OBP, data = mlbBat10) %>%
augment() %>%
arrange(desc(.hat), .cooksd) %>%
head()
lm(SLG ~ OBP, data = mlbBat10) %>%
augment() %>%
arrange(desc(.hat), .cooksd) %>%
select(SLG, OBP, .fitted, .hat, .cooksd)
head()
lm(SLG ~ OBP, data = mlbBat10) %>%
augment() %>%
arrange(desc(.hat), .cooksd) %>%
select(SLG, OBP, .fitted, .hat, .cooksd) %>%
head()
lm(SLG ~ OBP, data = mlbBat10) %>%
augment() %>%
arrange(desc(.hat), .cooksd) %>%
select(SLG, OBP, .fitted, .hat, .cooksd)
augment(mod) %>%
summarize(SSE = (n()-1) * var(.resid),
SSE_also = sum(.resid ^2))
lm(SLG ~ OBP, data = mlbBat10) %>%
augment() %>%
arrange(desc(.hat), .cooksd) %>%
#select(SLG, OBP, .fitted, .hat, .cooksd) %>%
head()
mlbBat10
lm(SLG ~ OBP, data = mlbBat10)
lm(formula = SLG ~ OBP, data = filter(mlbBat10, AB >= 10))
lm(formula = SLG ~ OBP, data = filter(mlbBat10, AB >= 10)) %>%
augment() %>%
arrange(desc(.hat), .cooksd) %>%
#select(SLG, OBP, .fitted, .hat, .cooksd) %>%
head()
lm(formula = SLG ~ OBP, data = filter(mlbBat10, AB >= 10)) %>%
augment() %>%
arrange(desc(.hat), .cooksd) %>%
select(SLG, OBP, .fitted, .hat, .cooksd) %>%
head()
# Create nontrivial_players
nontrivial_players <- mlbBat10 %>%
filter(AB >= 10 & OBP < 0.5)
# Fit model to new data
mod_cleaner <- lm(SLG ~ OBP, data = nontrivial_players)
# View model summary
summary(mod_cleaner)
# Visualize new model
ggplot(nontrivial_players, aes(x = OBP, y = SLG)) +
geom_point() +
geom_smooth(method = 'lm')
Assess
