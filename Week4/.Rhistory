coefplot(m2, xlab = 'GDP Estimated', ylab = 'Regress Varaibles', title = 'Response = GDP')
fit_m3 <- data.frame(data[, c("Region","GDP")], fitted = fitted(m3), resid = resid(m3),
infl = influence(m3)$hat )
ggplot(data = fit_m3, aes(x = GDP, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(data, tapply(GDP,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
labs(x = 'GDP', y = '機率密度')
ggplot(data = fit_m3, aes(x = scale(resid)), group = Region ) +
stat_density(geom = 'path', position = 'identity', aes(linetype = Region)) +
scale_linetype_manual(values = 10:1) +
guides(linetype = guide_legend(reverse = TRUE)) +
labs(x = '標準化殘差', y = 'Density') +
theme(legend.position = c(.15, .8))
ggplot(data = fit_m3, aes(x = scale(resid)), group = Region ) +
stat_density(geom = 'path', position = 'identity', aes(col = Region)) +
scale_linetype_manual(values = 10:1) +
guides(linetype = guide_legend(reverse = TRUE)) +
labs(x = '標準化殘差', y = 'Density') +
theme(legend.position = c(.15, .8))
install.packages('lattice')
library(lattice)
qqmath(~ scale(resid) | Region, data = fit_m2, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
library(lattice)
qqmath(~ scale(resid) | Region, data = fit_m3, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
library(lattice)
qqmath(~ scale(resid) | Region, data = fit_m3, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 1)
library(lattice)
qqmath(~ scale(resid) | Region, data = fit_m3, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
library(MASS)
library(MASS)
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'lm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
ggplot(data = fit_m2, aes(x = infl, y = scale(resid), group = Region)) +
geom_text(aes(label = rownames(fit_m2)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(Region ~ .) +
labs(x = '影響值', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
ggplot(data = fit_m3, aes(x = infl, y = scale(resid), group = Region)) +
geom_text(aes(label = rownames(fit_m2)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(Region ~ .) +
labs(x = '影響值', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
ggplot(data = fit_m3, aes(x = infl, y = scale(resid), group = Region)) +
geom_text(aes(label = rownames(fit_m3)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(Region ~ .) +
labs(x = '影響值', y = '標準化殘差')
# 看看影響值
summary(influence(m3)$hat)
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
install.packages('heplots')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom+Trust+Health, data= open_data_happiness_gdp,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corplot)
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
install.packages('corrplot')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
corrplot(cor(open_data_happiness_gdp), method = 'ellipse', order = 'hclust', addrect = 6,
type = 'upper', tl.pos = 'tp')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
corrplot(cor(analysis), method = 'ellipse', order = 'hclust', addrect = 6,
type = 'upper', tl.pos = 'tp')
corrplot(cor(open_data_happiness_gdp), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
corrplot(cor(analysis), method = 'ellipse', order = 'hclust', addrect = 6,
type = 'upper', tl.pos = 'tp')
corrplot(cor(analysis), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
install.packages('effects')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
corrplot(cor(analysis), method = 'ellipse', order = 'hclust', addrect = 6,
type = 'upper', tl.pos = 'tp')
corrplot(cor(analysis), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
# 解釋5個變項
summary(m4 <- lm(GDP ~ Happiness + Openness + Freedom + Trust + Health, data = analysis))
# 相關性繪圖
library(effects)
plot(allEffects(m4), main = '', grid = T)
library(lm.beta)
install.packages('lm.beta')
library(lm.beta)
summary(lm.beta(m4))
View(d)
ggplot(diamonds, aes(x = cut, y = price, col = color)) +
geom_boxplot(varwidth = T) +
facet_grid(.~color)
library(tidyr)
test_data <- get(load('D:/Downloads/test_datasets.RData'))
test_data2 <- gather(test_data, dist, value, 1:2)
# Plot two distributions with test_data2
ggplot(test_data2, aes(x = value, fill = dist, col = dist)) +
geom_rug(alpha = 0.6) +
geom_density(alpha = 0.6)
library(tidyr)
test_data <- get(load('D:/Downloads/test_datasets.RData'))
test_data2 <- gather(test_data, dist, value, 1:2)
# Plot two distributions with test_data2
ggplot(test_data2, aes(x = value, fill = dist, col = dist)) +
geom_rug(alpha = 0.4) +
geom_density(alpha = 0.4)
mammals <- get(load('D:/Downloads/mammals.RDS'))
mammals <- readRDS('D:/Downloads/mammals.RDS')
# Unweighted violin plot
ggplot(mammals, aes(x = vore, y = sleep_total, fill = vore)) +
geom_violin()
# Unweighted violin plot
ggplot(mammals, aes(x = vore, y = sleep_total, fill = vore, col = NA)) +
geom_violin()
# Unweighted violin plot
ggplot(mammals, aes(x = vore, y = sleep_total, fill = vore)) +
geom_violin(col = NA)
install.packages('datasets')
library(datasets)
library(viridis)
# Add viridis color scale
ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0,0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0,0)) +
coord_fixed(60/4.5) +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis()
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(col = ..level..), h = c(5, 0.5))
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(col = ..level..), h = c(5, 0.5)) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(fill = ..level..), h = c(5, 0.5)) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(fill = ..density..), h = c(5, 0.5)) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(geom =  'tile', aes(fill = ..density..), h = c(5, 0.5)) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(fill = ..density..), h = c(5, 0.5), contour = F) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(geom = 'tile', aes(fill = ..density..), h = c(5, 0.5), contour = F) +
scale_fill_viridis()
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis(alpha = 0.1)
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis(alpha = 0.001)
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE, alpha = 0.1) +
scale_fill_viridis()
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE, alpha = 0.3) +
scale_fill_viridis()
install.packages('rgdal')
library(ggmap)
germany_06 <- get_map(location = 'germany', zoom = 6)
# Plot map and polygon on top:
ggmap(germany_06) +
geom_polygon(data = bundes,
aes(x = long, y = lat, group = group),
fill = NA, col = "red") +
coord_map()
# All required packages are available
# Import shape information: germany
library(rgdal)
germany <- readOGR(dsn = 'D:/Downloads/shape_files', layer = 'DEU_adm1')
# fortify germany: bundes
library(ggfortify)
bundes <- fortify(germany)
# Plot map of germany
library(ggmap)
ggplot(bundes, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = '#DDDDDD', col = 'white') +
coord_map() +
theme_nothing()
# Import unemployment of germany
unemp <- read.table('D:/Downloads/germany_unemployment.txt', header = T)
# re-add state names to bundes
bundes$state <- factor(as.numeric(bundes$id))
levels(bundes$state) <- germany$NAME_1
# Merge bundes and unemp: bundes_unemp
bundes_unemp <- merge(bundes, unemp)
# Update the ggplot call
library(ggthemes)
ggplot(bundes_unemp, aes(x = long, y = lat, group = group, fill = unemployment)) +
geom_polygon() +
coord_map()
#theme_map()
#Cause legend & map overlapping
library(ggmap)
germany_06 <- get_map(location = 'germany', zoom = 6)
# Plot map and polygon on top:
ggmap(germany_06) +
geom_polygon(data = bundes,
aes(x = long, y = lat, group = group),
fill = NA, col = "red") +
coord_map()
res <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res.csv')
map <- get_map(location = c(min(res$lng), min(res$lat), max(res$lng), max(res$lat)), maptype = "toner")
library(gganimate)
res.stat.map.ani <- ggmap(map, darken = c(0.5, "white")) %+% res3_g + aes(x = lng, y = lat, z = per) +
stat_summary_2d(fun = median, alpha = 0.6) +
scale_fill_gradientn(name = 'Median', colours = brewer.pal(11, "RdYlGn"), space = 'Lab') +
labs(title = 'Monday, {closest_state}', x = "Longitude", y = "Latitude") +
coord_map() +
transition_states(time, transition_length = 1, state_length = 1)
# Data
library(tidyr)
res <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res.csv')
map <- get_map(location = c(min(res$lng), min(res$lat), max(res$lng), max(res$lat)), maptype = "toner")
res1 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res1.csv')
res1_g <- gather(res3, time, per, X7:X24)
# Data
library(tidyr)
res <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res.csv')
map <- get_map(location = c(min(res$lng), min(res$lat), max(res$lng), max(res$lat)), maptype = "toner")
res1 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res1.csv')
res1_g <- gather(res1, time, per, X7:X24)
res1_g$time <- str_replace(res3_g$time, 'X', '')
# Data
library(tidyr)
res <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res.csv')
map <- get_map(location = c(min(res$lng), min(res$lat), max(res$lng), max(res$lat)), maptype = "toner")
res1 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res1.csv')
res1_g <- gather(res1, time, per, X7:X24)
res1_g$time <- str_replace(res1_g$time, 'X', '')
# Data
library(tidyr)
library(stringr)
res <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res.csv')
map <- get_map(location = c(min(res$lng), min(res$lat), max(res$lng), max(res$lat)), maptype = "toner")
res1 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res1.csv')
res1_g <- gather(res1, time, per, X7:X24)
res1_g$time <- str_replace(res1_g$time, 'X', '')
library(gganimate)
res.stat.map.ani <- ggmap(map, darken = c(0.5, "white")) %+% res1_g + aes(x = lng, y = lat, z = per) +
stat_summary_2d(fun = median, alpha = 0.6) +
scale_fill_gradientn(name = 'Median', colours = brewer.pal(11, "RdYlGn"), space = 'Lab') +
labs(title = 'Monday, {closest_state}', x = "Longitude", y = "Latitude") +
coord_map() +
transition_states(time, transition_length = 1, state_length = 1)
# Data
library(tidyr)
library(stringr)
res <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res.csv')
map <- get_map(location = c(min(res$lng), min(res$lat), max(res$lng), max(res$lat)), maptype = "toner")
res1 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res1.csv')
res1_g <- gather(res1, time, per, X7:X24)
res1_g$time <- str_replace(res1_g$time, 'X', '')
library(gganimate)
library(RColorBrewer)
res.stat.map.ani <- ggmap(map, darken = c(0.5, "white")) %+% res1_g + aes(x = lng, y = lat, z = per) +
stat_summary_2d(fun = median, alpha = 0.6) +
scale_fill_gradientn(name = 'Median', colours = brewer.pal(11, "RdYlGn"), space = 'Lab') +
labs(title = 'Monday, {closest_state}', x = "Longitude", y = "Latitude") +
coord_map() +
transition_states(time, transition_length = 1, state_length = 1)
print(res.stat.map.ani)
# res
res3 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res2.csv')
res3_g <- gather(res3, time, per, X7:X24)
res3_g$time <- str_replace(res3_g$time, 'X', '')
# Animation
res.stat.map.ani <- ggmap(map, darken = c(0.6, "white")) %+% res3_g + aes(x = lng, y = lat, z = per) +
stat_summary_2d(fun = median, alpha = 0.8) +
geom_polygon(data = taipei,
aes(x = long, y = lat, group = group),
fill = NA, col = "#666666",
inherit.aes = FALSE) +
scale_fill_gradientn(name = 'Median', colours = brewer.pal(11, "RdYlGn"), space = 'Lab') +
labs(title = 'Tuesday, {closest_state}', x = "Longitude", y = "Latitude") +
coord_map() +
transition_states(time, transition_length = 1, state_length = 1)
print(res.stat.map.ani)
res3 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res2.csv')
res3 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res2.csv')
res3_g <- gather(res3, time, per, X7:X24)
res3_g$time <- str_replace(res3_g$time, 'X', '')
# Animation
res.stat.map.ani <- ggmap(map, darken = c(0.6, "white")) %+% res3_g + aes(x = lng, y = lat, z = per) +
stat_summary_2d(fun = median, alpha = 0.8) +
geom_polygon(data = taipei,
aes(x = long, y = lat, group = group),
fill = NA, col = "#666666",
inherit.aes = FALSE) +
scale_fill_gradientn(name = 'Median', colours = brewer.pal(11, "RdYlGn"), space = 'Lab') +
labs(title = 'Tuesday, {closest_state}', x = "Longitude", y = "Latitude") +
coord_map() +
transition_states(time, transition_length = 1, state_length = 1)
print(res.stat.map.ani)
taipei <- readOGR(dsn = 'D:/GitHub/NTU-CS-X/Final Project/Youbike/data/taipei_town', layer = 'Taipei_town')
taipei <- fortify(taipei)
# res
res3 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res2.csv')
res3_g <- gather(res3, time, per, X7:X24)
res3_g$time <- str_replace(res3_g$time, 'X', '')
# Animation
res.stat.map.ani <- ggmap(map, darken = c(0.6, "white")) %+% res3_g + aes(x = lng, y = lat, z = per) +
stat_summary_2d(fun = median, alpha = 0.8) +
geom_polygon(data = taipei,
aes(x = long, y = lat, group = group),
fill = NA, col = "#666666",
inherit.aes = FALSE) +
scale_fill_gradientn(name = 'Median', colours = brewer.pal(11, "RdYlGn"), space = 'Lab') +
labs(title = 'Tuesday, {closest_state}', x = "Longitude", y = "Latitude") +
coord_map() +
transition_states(time, transition_length = 1, state_length = 1)
print(res.stat.map.ani)
map <- get_map(location = c(min(taipei$long), min(taipei$lat), max(taipei$long), max(taipei$lat)), maptype = "toner")
res3 <- read.csv('D:/GitHub/NTU-CS-X/Final Project/Youbike/data/Youbike_res2.csv')
res3_g <- gather(res3, time, per, X7:X24)
res3_g$time <- str_replace(res3_g$time, 'X', '')
# Animation
res.stat.map.ani <- ggmap(map, darken = c(0.6, "white")) %+% res3_g + aes(x = lng, y = lat, z = per) +
stat_summary_2d(fun = median, alpha = 0.8) +
geom_polygon(data = taipei,
aes(x = long, y = lat, group = group),
fill = NA, col = "#666666",
inherit.aes = FALSE) +
scale_fill_gradientn(name = 'Median', colours = brewer.pal(11, "RdYlGn"), space = 'Lab') +
labs(title = 'Tuesday, {closest_state}', x = "Longitude", y = "Latitude") +
coord_map() +
transition_states(time, transition_length = 1, state_length = 1)
print(res.stat.map.ani)
