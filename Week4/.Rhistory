# Transform the scale
d + scale_y_log10()
# Transform the coordinates
d + coord_trans(y = "log10")
# Sample 10000 movies from ggplot2movies
movies_small <- movies[sample(nrow(movies), 1000), ]
movies_small$rating <- factor(round(movies_small$rating))
# Add a boxplot geom
d <- ggplot(movies_small, aes(x = rating, y = votes)) +
geom_point() +
geom_boxplot() +
stat_summary(fun.data = "mean_cl_normal",
geom = "crossbar",
width = 0.2,
col = "red")
# Untransformed plot
d
# Transform the scale
d + scale_y_log10()
# Transform the coordinates
d + coord_trans(y = "log10")
# Sample 10000 movies from ggplot2movies
movies_small <- movies[sample(nrow(movies), 10000), ]
movies_small$rating <- factor(round(movies_small$rating))
# Add a boxplot geom
d <- ggplot(movies_small, aes(x = rating, y = votes)) +
geom_point() +
geom_boxplot() +
stat_summary(fun.data = "mean_cl_normal",
geom = "crossbar",
width = 0.2,
col = "red")
# Untransformed plot
d
# Transform the scale
d + scale_y_log10()
# Transform the coordinates
d + coord_trans(y = "log10")
library(ggplot2movies)
library(ggplot2)
# Sample 1000 movies from ggplot2movies
set.seed(123)
movies_small <- movies[sample(nrow(movies), 1000), ]
movies_small$rating <- factor(round(movies_small$rating))
# Build a scatter plot with mean and 95% CI
ggplot(movies_small, aes(x = rating, y = votes)) +
geom_point() +
stat_summary(fun.data = "mean_cl_normal",
geom = 'crossbar',
width = 0.2,
col = 'red') +
scale_y_log10()
library(ggplot2movies)
library(ggplot2)
# Sample 1000 movies from ggplot2movies
set.seed(123)
movies_small <- movies[sample(nrow(movies), 10000), ]
movies_small$rating <- factor(round(movies_small$rating))
# Build a scatter plot with mean and 95% CI
ggplot(movies_small, aes(x = rating, y = votes)) +
geom_point() +
stat_summary(fun.data = "mean_cl_normal",
geom = 'crossbar',
width = 0.2,
col = 'red') +
scale_y_log10()
# Sample 10000 movies from ggplot2movies
movies_small <- movies[sample(nrow(movies), 10000), ]
movies_small$rating <- factor(round(movies_small$rating))
# Add a boxplot geom
d <- ggplot(movies_small, aes(x = rating, y = votes)) +
geom_point() +
geom_boxplot() +
stat_summary(fun.data = "mean_cl_normal",
geom = "crossbar",
width = 0.2,
col = "red")
# Untransformed plot
d
# Transform the scale
d + scale_y_log10()
# Transform the coordinates
d + coord_trans(y = "log10")
# Sample 10000 movies from ggplot2movies
set.seed(123)
movies_small <- movies[sample(nrow(movies), 10000), ]
movies_small$rating <- factor(round(movies_small$rating))
# Add a boxplot geom
d <- ggplot(movies_small, aes(x = rating, y = votes)) +
geom_point() +
geom_boxplot() +
stat_summary(fun.data = "mean_cl_normal",
geom = "crossbar",
width = 0.2,
col = "red")
# Untransformed plot
d
# Transform the scale
d + scale_y_log10()
# Transform the coordinates
d + coord_trans(y = "log10")
test_data <- get(load('D:/Downloads/test_datasets.RData'))
test_data <- get(load('D:/Downloads/test_datasets.RData'))
# Calculating density: d
d <- density(test_data$norm)
# Use which.max() to calculate mode
mode <- d$x[which.max(d$y)]
# Finish the ggplot call
ggplot(test_data, aes(x = norm)) +
geom_density() +
geom_rug() +
geom_vline(xintercept = mode, col = "red")
library(coefplot)
m2 <- lm(GDP ~ Region - 1,
data = data)
install.packages('coefplot')
# Import data
library(formattable)
library(dplyr)
setwd("D:/GitHub/NTU-CS-X/Week4")
data <- read.csv('./data.csv')
data %>%
formattable(align = "l") %>%
head(5)
library(ggplot2)
library(Hmisc)
data <- filter(data, !is.na(Region))
data %>%
ggplot(aes(x = Region, y = Openness)) +
geom_jitter(shape = 16, width = 0.1, alpha = 0.5) +
stat_summary(geom = 'point', fun.y = mean, col = '#E41A1C') +
# fun.args = list(mult = 1) to have a errorbar that spans over one standard deviation in both directions.
stat_summary(geom = 'errorbar', fun.data = mean_sdl, fun.args = list(mult = 1),
width = 0.3, col = '#E41A1C') +
labs(y = 'Openness', title = 'Openness & Region - with T-tipped error bars') +
theme(axis.title.y = element_blank(), panel.grid = element_blank(), panel.background = element_blank()) +
geom_hline(yintercept = mean(data$Openness), linetype = 'dotted') +
coord_flip()
anova(lm(Openness ~ Region, data = data))
data %>%
ggplot(aes(x = Region, y = Happiness)) +
geom_jitter(shape = 16, width = 0.1, alpha = 0.5) +
stat_summary(geom = 'point', fun.y = mean, col = '#E41A1C') +
stat_summary(geom = 'errorbar', fun.data = mean_sdl, fun.args = list(mult = 1),
width = 0.3, col = '#E41A1C') +
labs(y = 'Happiness', title = 'Happiness & Region - with T-tipped error bars') +
theme(axis.title.y = element_blank(), panel.grid = element_blank(), panel.background = element_blank()) +
geom_hline(yintercept = mean(data$Happiness), linetype = 'dotted') +
coord_flip()
anova(lm(Happiness ~ Region, data = data))
data %>%
ggplot(aes(x = Region, y = GDP)) +
geom_jitter(shape = 16, width = 0.1, alpha = 0.5) +
stat_summary(geom = 'point', fun.y = mean, col = '#E41A1C') +
stat_summary(geom = 'errorbar', fun.data = mean_sdl, fun.args = list(mult = 1),
width = 0.3, col = '#E41A1C') +
labs(y = 'GDP', title = 'GDP & Region - with T-tipped error bars') +
theme(axis.title.y = element_blank(), panel.grid = element_blank(), panel.background = element_blank()) +
geom_hline(yintercept = mean(data$GDP), linetype = 'dotted') +
coord_flip()
anova(lm(GDP ~ Region, data = data))
library(coefplot)
m2 <- lm(GDP ~ Region - 1,
data = data)
coefplot(m2, xlab = 'GDP Estimated', ylab = 'Regress Varaibles', title = 'Response = GDP')
fit_m3 <- data.frame(data[, c("Region","GDP")], fitted = fitted(m3), resid = resid(m3),
infl = influence(m3)$hat )
library(coefplot)
m3 <- lm(GDP ~ Region - 1,
data = data)
coefplot(m2, xlab = 'GDP Estimated', ylab = 'Regress Varaibles', title = 'Response = GDP')
fit_m3 <- data.frame(data[, c("Region","GDP")], fitted = fitted(m3), resid = resid(m3),
infl = influence(m3)$hat )
ggplot(data = fit_m3, aes(x = GDP, group = Region )) +
stat_density(geom = 'path', position = 'identity') +
stat_density(geom = 'path', position = 'identity', aes(x = fitted)) +
geom_vline(xintercept = c(with(data, tapply(GDP,Region, mean))), linetype = 'dotted')+
facet_grid(Region ~ .) +
labs(x = 'GDP', y = '機率密度')
ggplot(data = fit_m3, aes(x = scale(resid)), group = Region ) +
stat_density(geom = 'path', position = 'identity', aes(linetype = Region)) +
scale_linetype_manual(values = 10:1) +
guides(linetype = guide_legend(reverse = TRUE)) +
labs(x = '標準化殘差', y = 'Density') +
theme(legend.position = c(.15, .8))
ggplot(data = fit_m3, aes(x = scale(resid)), group = Region ) +
stat_density(geom = 'path', position = 'identity', aes(col = Region)) +
scale_linetype_manual(values = 10:1) +
guides(linetype = guide_legend(reverse = TRUE)) +
labs(x = '標準化殘差', y = 'Density') +
theme(legend.position = c(.15, .8))
install.packages('lattice')
library(lattice)
qqmath(~ scale(resid) | Region, data = fit_m2, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
library(lattice)
qqmath(~ scale(resid) | Region, data = fit_m3, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
library(lattice)
qqmath(~ scale(resid) | Region, data = fit_m3, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 1)
library(lattice)
qqmath(~ scale(resid) | Region, data = fit_m3, type = c('p', 'g', 'r'),
xlab = '常態位數', ylab = '標準化殘差', layout = c(2, 3),
pch = '.', cex = 2)
library(MASS)
library(MASS)
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'lm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
ggplot(data = fit_m2, aes(x = infl, y = scale(resid), group = Region)) +
geom_text(aes(label = rownames(fit_m2)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(Region ~ .) +
labs(x = '影響值', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
ggplot(data = fit_m3, aes(x = infl, y = scale(resid), group = Region)) +
geom_text(aes(label = rownames(fit_m2)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(Region ~ .) +
labs(x = '影響值', y = '標準化殘差')
library(MASS)
ggplot(data = fit_m3, aes(x = fitted, y = scale(resid), group = Region )) +
geom_point(pch = 20, size = 1) +
stat_smooth(method = 'rlm', se = F) +
facet_grid(Region ~ .) +
labs(x = 'GDP Estimated', y = '標準化殘差')
ggplot(data = fit_m3, aes(x = infl, y = scale(resid), group = Region)) +
geom_text(aes(label = rownames(fit_m3)), cex = 2) +
geom_hline(yintercept = 0, linetype = 'dotted') +
facet_grid(Region ~ .) +
labs(x = '影響值', y = '標準化殘差')
# 看看影響值
summary(influence(m3)$hat)
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
install.packages('heplots')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom+Trust+Health, data= open_data_happiness_gdp,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corplot)
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
install.packages('corrplot')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
corrplot(cor(open_data_happiness_gdp), method = 'ellipse', order = 'hclust', addrect = 6,
type = 'upper', tl.pos = 'tp')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
corrplot(cor(analysis), method = 'ellipse', order = 'hclust', addrect = 6,
type = 'upper', tl.pos = 'tp')
corrplot(cor(open_data_happiness_gdp), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
corrplot(cor(analysis), method = 'ellipse', order = 'hclust', addrect = 6,
type = 'upper', tl.pos = 'tp')
corrplot(cor(analysis), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
install.packages('effects')
analysis<-data[,c("GDP","Happiness","Openness","Freedom","Trust","Health")]
# 看看基本統計量
colMeans(analysis)
# 兩兩散佈圖
library(heplots)
scatterplotMatrix(~ GDP + Happiness + Openness + Freedom + Trust + Health, data = analysis,
pch = '.', cex = 3, smooth = FALSE, reg.line = FALSE, ellipse = TRUE,
diagonal = 'none', lower.panel = NULL)
# 相關性
library(corrplot)
corrplot(cor(analysis), method = 'ellipse', order = 'hclust', addrect = 6,
type = 'upper', tl.pos = 'tp')
corrplot(cor(analysis), add = TRUE, type = 'lower', method = 'number',
order = 'hclust', col = 'black', diag = FALSE, tl.pos = 'n', cl.pos = 'n')
# 解釋5個變項
summary(m4 <- lm(GDP ~ Happiness + Openness + Freedom + Trust + Health, data = analysis))
# 相關性繪圖
library(effects)
plot(allEffects(m4), main = '', grid = T)
library(lm.beta)
install.packages('lm.beta')
library(lm.beta)
summary(lm.beta(m4))
View(d)
ggplot(diamonds, aes(x = cut, y = price, col = color)) +
geom_boxplot(varwidth = T) +
facet_grid(.~color)
library(tidyr)
test_data <- get(load('D:/Downloads/test_datasets.RData'))
test_data2 <- gather(test_data, dist, value, 1:2)
# Plot two distributions with test_data2
ggplot(test_data2, aes(x = value, fill = dist, col = dist)) +
geom_rug(alpha = 0.6) +
geom_density(alpha = 0.6)
library(tidyr)
test_data <- get(load('D:/Downloads/test_datasets.RData'))
test_data2 <- gather(test_data, dist, value, 1:2)
# Plot two distributions with test_data2
ggplot(test_data2, aes(x = value, fill = dist, col = dist)) +
geom_rug(alpha = 0.4) +
geom_density(alpha = 0.4)
mammals <- get(load('D:/Downloads/mammals.RDS'))
mammals <- readRDS('D:/Downloads/mammals.RDS')
# Unweighted violin plot
ggplot(mammals, aes(x = vore, y = sleep_total, fill = vore)) +
geom_violin()
# Unweighted violin plot
ggplot(mammals, aes(x = vore, y = sleep_total, fill = vore, col = NA)) +
geom_violin()
# Unweighted violin plot
ggplot(mammals, aes(x = vore, y = sleep_total, fill = vore)) +
geom_violin(col = NA)
install.packages('datasets')
library(datasets)
library(viridis)
# Add viridis color scale
ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0,0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0,0)) +
coord_fixed(60/4.5) +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis()
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(col = ..level..), h = c(5, 0.5))
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(col = ..level..), h = c(5, 0.5)) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(fill = ..level..), h = c(5, 0.5)) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(fill = ..density..), h = c(5, 0.5)) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(geom =  'tile', aes(fill = ..density..), h = c(5, 0.5)) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(aes(fill = ..density..), h = c(5, 0.5), contour = F) +
scale_fill_viridis()
library(datasets)
# Base layers
p <- ggplot(faithful, aes(x = waiting, y = eruptions)) +
scale_y_continuous(limits = c(1, 5.5), expand = c(0, 0)) +
scale_x_continuous(limits = c(40, 100), expand = c(0, 0)) +
coord_fixed(60 / 4.5)
# Use geom_density_2d()
p + geom_density_2d()
# Use stat_density_2d() with arguments
p + stat_density_2d(geom = 'tile', aes(fill = ..density..), h = c(5, 0.5), contour = F) +
scale_fill_viridis()
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis(alpha = 0.1)
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE) +
scale_fill_viridis(alpha = 0.001)
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE, alpha = 0.1) +
scale_fill_viridis()
library(viridis)
# Add viridis color scale
p +
stat_density_2d(geom = "tile", aes(fill = ..density..), h=c(5,.5), contour = FALSE, alpha = 0.3) +
scale_fill_viridis()
install.packages('rgdal')
